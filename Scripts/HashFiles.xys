include "Libraries\File"

/// Ask the user to select one or several hash algorithms.
/// Returns the list of selected algorithms.
///
/// - separator: the separator to use between returned algorithm
function AskForHashAlgorithms($separator)
{
    $hashAlgorithms = "";
    while ($hashAlgorithms == "")
    {
        $hashAlgorithms = InputSelect("Select the hash algorithm(s) to calculate", "CRC-32|+MD5|SHA-1|SHA-256|SHA-512", $separator, 2,, 300, 250, "Hash files");
        if ($hashAlgorithms == "")
        {
            Msg("Please select at least one hash algorithm to calculate.", 16);
        }
    }

    return $hashAlgorithms;
}

/// Returns the hash algorithm in XY format from the specified algorithm.
/// Supported algorithms are:
/// "CRC-32"
/// "MD5"
/// "SHA-1"
/// "SHA-256"
/// "SHA-512"
function GetHashAlgorithmInXYFormat($hashAlgorithm)
{
    switch ($hashAlgorithm)
    {
        case "CRC-32":
            $hashAlgo = "crc32";
            break;
        case "MD5":
            $hashAlgo = "md5";
            break;
        case "SHA-1":
            $hashAlgo = "sha1";
            break;
        case "SHA-256":
            $hashAlgo = "sha256";
            break;
        case "SHA-512":
            $hashAlgo = "sha512";
            break;
    }

    return $hashAlgo;
}

/// Returns the hash algorithm padded with spaces in order to have a fixed string length, no matter the algorithm.
/// Supported algorithms are:
/// "CRC-32"
/// "MD5"
/// "SHA-1"
/// "SHA-256"
/// "SHA-512"
function PadRightHashAlgorithm($hashAlgorithm)
{
    switch ($hashAlgorithm)
    {
        case "CRC-32":
            $hashAlgo = "CRC-32:  ";
            break;
        case "MD5":
            $hashAlgo = "MD5:     ";
            break;
        case "SHA-1":
            $hashAlgo = "SHA-1:   ";
            break;
        case "SHA-256":
            $hashAlgo = "SHA-256: ";
            break;
        case "SHA-512":
            $hashAlgo = "SHA-512: ";
            break;
    }

    return $hashAlgo;
}

/// Returns a human readable timespan computed from the difference between $endDate and $startDate
/// Returns the time in milliseconds if less than 1 second, else returns the time in seconds.
function GetHumanReadableTimespan($startDate, $endDate)
{
    $timespan = DateDiff($startDate, $endDate, "ms");
    $unit = "ms";

    if ($timespan >= 1000)
    {
        $timespan = Format($timespan / 1000, "0.00"); // Keep two digits behind comma
        $unit = "s";
    }

    return $timespan.$unit;
}

/* Computes hash values for the selected files.
 *
 * The hash algorithm can be several of the following:
 * - CRC-32
 * - MD5
 * - SHA-1
 * - SHA-256
 * - SHA-512
 */
"HashFiles"
    // Get selected files
    $filesSeparator = "|";
    $filesPaths = GetSelectedFilesRecursively($filesSeparator);

    if ($filesPaths == "")
    {
        Msg("No file found in the selection.".<br>."Select at least one file or folder containing a file.", 16);
        End(1);
    }

    // Ask for hash algorithms
    $hashesSeparator = "|";
    $hashAlgos = AskForHashAlgorithms($hashesSeparator);

    $results = "";
    foreach ($filePath, $filesPaths, $filesSeparator)
    {
        // Store file path and size in results
        $fileSize = FileSize($filePath);
        $fileSizeTxt = FormatBytes($fileSize)." (".Format($fileSize, "0,###")." bytes)";
        $results = $results."File:    ".$filePath.<br>."Size:    ".$fileSizeTxt.<br>;

        foreach ($hashAlgo, $hashAlgos, $hashesSeparator)
        {
            $hashAlgoXY = GetHashAlgorithmInXYFormat($hashAlgo);

            // Compute hash
            $startDate = <date yyyy-mm-dd hh:nn:ss.fff>;
            $hashValue = Hash($hashAlgoXY, $filePath, 3);
            $endDate = <date yyyy-mm-dd hh:nn:ss.fff>;

            $durationText = GetHumanReadableTimespan($startDate, $endDate);
            $hashAlgoText = PadRightHashAlgorithm($hashAlgo);

            // Store result for this hash
            $results = $results.$hashAlgoText.$hashValue." (".$durationText.")".<br>;
        }

        // Store result for this file
        $results = $results.<br>;
    }

    // Adapt window width depending on selected hash types
    if (StrPos($hashAlgos, "SHA-512") == -1)
    {
        $windowWidth = 800;
    }
    else
    {
        $windowWidth = 1250;
    }

    // Display results
    Text($results, $windowWidth, 400, "Hash files");
